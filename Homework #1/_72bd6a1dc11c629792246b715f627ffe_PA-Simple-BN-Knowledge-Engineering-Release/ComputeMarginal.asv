%ComputeMarginal Computes the marginal over a set of given variables
%   M = ComputeMarginal(V, F, E) computes the marginal over variables V
%   in the distribution induced by the set of factors F, given evidence E
%
%   M is a factor containing the marginal over variables V
%   V is a vector containing the variables in the marginal e.g. [1 2 3] for
%     X_1, X_2 and X_3.
%   F is a vector of factors (struct array) containing the factors 
%     defining the distribution
%   E is an N-by-2 matrix, each row being a variable/value pair. 
%     Variables are in the first column and values are in the second column.
%     If there is no evidence, pass in the empty matrix [] for E.


function M = ComputeMarginal(V, F, E)
% Check for empty factor list
if (numel(F) == 0)
      warning('Warning: empty factor list');
      M = struct('var', [], 'card', [], 'val', []);      
      return;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% YOUR CODE HERE:
% M should be a factor
% Remember to renormalize the entries of M!
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

M = struct('var', [], 'card', [], 'val', []); % Returns empty factor. Change this.
Joint = ComputeJointDistribution(F);
assignments = IndexToAssignment(1:prod(Joint.card), Joint.card);
Joint_observed = ObserveEvidence(Joint,E);
Joint_observed.val = Joint_observed.val/sum(Joint_observed.val);
Joint_reduced.var = Joint_observed.var;
for i = 1:size(E,1)
    Joint_reduced.var = Joint_reduced.var(Joint_reduced.var~=E(i,1));
end
[dummy,map_JR] = ismember(Joint_reduced.var,Joint.var);
if isempty(E)
    Joint_reduced = Joint;
else
    [dummy,map_E] = ismember(E(:,1),Joint.var);
    Joint_reduced.card = Joint.card(map_JR);
    Asign = zeros(prod(Joint_reduced.card),length(Joint.var));
    k=1;
    for i = 1:prod(Joint.card)
        if assignments(i,map_E) == E(:,2)';
            Asign(k,:) = assignments(i,:);
            k=k+1;
        end
    end
    for i = 1:prod(Joint_reduced.card)
        Joint_reduced.val(i) = Joint_observed.val(AssignmentToIndex(Asign(i,:),Joint.card));
    end
end
Marginal = Joint_reduced.var;
for i = 1:length(V)
    Marginal = Marginal(Marginal~=V(i));
end
K = FactorMarginalization(Joint_reduced,Marginal);
if length(intersect(K.var,V))==length(V)
    J.var = V;
else 
    J.var = intersect(K.var,V)
end
[dummy,map_J] = ismember(J.var,K.var);
J.card = K.card(map_J);
assignments = IndexToAssignment(1:prod(K.card),K.card);
J.val = K.val(AssignmentToIndex(assignments(:,map_J),K.card));

if length(intersect(K.var,V))~=length(V)
    M.var = V;
    [dummy,map_V] = ismember(V,Joint.var);
    M.card=Joint.card(map_V);
    assignments = IndexToAssignment(1:prod(M.card),M.card);
    redundency = intersect(V,E(:,1));
    [dummy,map_redd] = ismember(redundency,E(:,1));
    [dummy,map_red] = ismember(redundency,V);
    [dummy,map_JJ] = ismember(J.var,V);
    for i = 1:prod(M.card)
        if assignments(i,map_red)==E(map_redd,2)';
            M.val(i) = J.val(AssignmentToIndex(assignments(i,map_JJ),J.card));
        else
            M.val(i) = 0;
        end
    end
else
    M=J;
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end
